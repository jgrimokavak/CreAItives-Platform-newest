Replit Agent, refactor our image-upload pipeline so GPT-Image-1 edits never fail by making these precise changes to routes.ts (no edits needed in schema.ts, storage.ts or openai.ts):

1. At the top of routes.ts, ensure you have these imports (you already do, but confirm):

js
Copy
Edit
import fs from 'fs';
import path from 'path';
import sharp from 'sharp';
import { openai } from './openai';
2. Inside the /api/upload-image handler, replace everything from the moment you read req.body.images through to the openai.images.edit call with this flow:

Parse and buffer the first base64 image:

js
Copy
Edit
const imgBase64   = req.body.images[0];
const imgBuffer   = Buffer.from(imgBase64, 'base64');
Set up temp paths:

js
Copy
Edit
const tempDir      = path.join(__dirname, '../temp');
if (!fs.existsSync(tempDir)) fs.mkdirSync(tempDir, { recursive: true });
const mainImagePath = path.join(tempDir, `main_${Date.now()}.png`);
const maskPath      = path.join(tempDir, `mask_${Date.now()}.png`);
Convert to PNG with an alpha channel so the API sees real transparency:

js
Copy
Edit
await sharp(imgBuffer)
  .ensureAlpha(0)
  .png()
  .toFile(mainImagePath);
Read dimensions and build a fully-transparent mask of the same size:

js
Copy
Edit
const { width, height } = await sharp(imgBuffer).metadata();
const maskBuffer = await sharp({
  create: {
    width,
    height,
    channels: 4,
    background: { r: 0, g: 0, b: 0, alpha: 0 }
  }
})
  .png()
  .toBuffer();
fs.writeFileSync(maskPath, maskBuffer);
Call the edit endpoint with both streams (no response_format override):

js
Copy
Edit
const response = await openai.images.edit({
  image:  fs.createReadStream(mainImagePath),
  mask:   fs.createReadStream(maskPath),
  model:  'gpt-image-1',
  prompt,
  n:      1,
  size,
  quality
});
Parse and return the result:

js
Copy
Edit
const urlOrB64 = response.data[0].url || response.data[0].b64_json;
res.json({ images: [{ url: urlOrB64 }] });
Cleanup temp files in a finally block:

js
Copy
Edit
if (fs.existsSync(mainImagePath)) fs.unlinkSync(mainImagePath);
if (fs.existsSync(maskPath))      fs.unlinkSync(maskPath);
3. For full-image style transfers (no masking needed), replace the above edit call with a generate call:

js
Copy
Edit
const response = await openai.images.generate({
  model:  'gpt-image-1',
  prompt,
  n:      1,
  size,
  quality
});
4. Remove any old branches that conditionally set response_format for GPT-Image-1 or tried to call images.variation (only DALL-E 2 supports that).

With these changes in routes.ts, your upload â†’ edit flow will always send a valid PNG with transparency plus an explicit mask, guaranteeing GPT-Image-1 performs the intended edit.