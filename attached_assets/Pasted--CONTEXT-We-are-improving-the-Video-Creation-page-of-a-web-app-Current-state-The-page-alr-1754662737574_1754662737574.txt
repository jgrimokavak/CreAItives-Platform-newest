# CONTEXT
We are improving the **Video Creation** page of a web app. 
Current state:
The page already generates videos using existing APIs (`POST /api/video/generate`).
"AI Enhance" works.
Generated videos are saved in the gallery and stored in object storage.
There is a **Projects** feature partially implemented:
Users can select a project before generating a video.
Videos can have a `projectId` (or be unassigned).
Gallery displays all videos, but not organized cleanly by project.
The Create tab currently has the generation form and a messy layout.
Goals for this step:
Create a **unified VideoCard component** to display videos anywhere (Gallery, Project view, Result area).
Play videos inline using HTML5 `<video>` (no new browser tab).
Provide consistent Delete and Move actions on every card.
Implement this in a way that avoids breaking other features.
---
# BEFORE STARTING
Re-run type-check and start the dev server. 
   If there are any errors or import issues, **fix them first**.
Ensure:
`client/src/pages/VideoPage.tsx` builds without runtime errors.
`/api/video`, `/api/video?projectId=null`, and `/api/projects/:id/details` return data as expected. 
     If any route fails (404/500), fix its import/export or handler before continuing.
---
# TASK: Create a reusable `VideoCard` component and use it everywhere videos are displayed
## 1. Create the component
**File:** `client/src/components/VideoCard.tsx`
**Props:**
```ts
export interface VideoCardProps {
  video: {
    id: string;
    url?: string | null;
    thumbUrl?: string | null;
    status: 'pending' | 'processing' | 'completed' | 'failed';
    prompt: string;
    model: string;
    resolution?: string | null;
    duration?: string | null;
    projectId?: string | null;
    createdAt?: string | null;
  };
  draggable?: boolean;
  onDelete?: (id: string) => void;
  onMove?: (id: string, projectId: string | null) => void;
  className?: string;
}
UI requirements:
	•	Use Shadcn UI components (Card, DropdownMenu, Badge, etc.).
	•	Top section:
	•	If video.url && status === 'completed':
<video
  controls
  preload="metadata"
  poster={thumbUrl ?? undefined}
  className="w-full h-full object-cover"
/>
	•	Otherwise, show a placeholder with thumbUrl if available, else a neutral icon.
	•	Overlay a small status chip for Processing / Failed / Completed.
	•	Footer section:
	•	Show: model, resolution, duration, createdAt (short date format).
	•	Overflow menu (3 dots):
	•	Play (focus & play inline <video>)
	•	Download (force blob download)
	•	Delete → calls onDelete(video.id)
	• Move to… → fetch /api/projects and show options + “No project” (null)
⸻
Behavior
	•	Delete:
	•	Call DELETE /api/video/:id.
	•	Then queryClient.invalidateQueries() for:
	•	['/api/video']
	•	['/api/projects']
	•	['/api/projects', projectId, 'details']
	•	Move:
	•	Call PATCH /api/video/:id/move with { projectId }.
	•	Invalidate the same keys.
⸻
Integrate into existing pages
In client/src/pages/VideoPage.tsx:
Inside function VideoGallery():
	•	Replace ad-hoc video tiles with VideoCard.
Inside ProjectVideoPreview:
	•	Replace ad-hoc tiles with VideoCard.
Remove any window.open(video.url, '_blank') calls and rely on inline playback.
⸻
ACCEPTANCE CRITERIA
	•	The build passes with no type or runtime errors.
	•	All video lists (Gallery + Project preview) use the new VideoCard.
	•	Videos play inline in the card.
	•	Delete works and updates all relevant views.
	•	“Move to…” menu works and updates counts/lists.