
🧠 Context & Findings:
Our current Email Builder exports HTML using a custom function (`getBuilderHtml()`) that manually converts each component’s data into a simplified HTML string with basic inline styles. This process does **not** use the actual, styled DOM rendered in the builder canvas and omits most CSS classes, computed styles, and advanced layout logic. As a result, the exported HTML looks very different from the live preview/builder.

No backend or legacy template is being used for preview/export—everything is now client-side, but the architecture only creates a crude HTML approximation rather than capturing the real rendered output.

---

🎯 Goal:
Export an HTML file that **exactly matches** what’s shown in the Email Builder canvas—structure, styling, spacing, and component arrangement—so users get a true WYSIWYG export.

---

🛠️ Implementation Plan:

1. **Stop using the manual “component → HTML string” mapping for export and preview.**
   - The builder canvas is already rendering the true React component tree with all active props, classes, and computed styles.

2. **Update getBuilderHtml():**
   - Use a React `ref` (e.g., `builderRef`) attached to the main container of the builder canvas (the element that wraps the entire email preview).
   - When exporting or previewing, call `builderRef.current.outerHTML` to get the **real, rendered HTML** from the DOM—not a reconstructed string.

   Example:
   ```ts
   const getBuilderHtml = () => {
     if (!builderRef.current) return '';
     const html = builderRef.current.outerHTML;
     return `
     <!DOCTYPE html>
     <html>
       <head>
         <meta charset="utf-8" />
         <meta name="viewport" content="width=device-width, initial-scale=1.0" />
         <title>${emailContent.subject || "My Email"}</title>
         <style>
           body { margin:0; padding:0; font-family:sans-serif; }
           /* [Optional] Add essential shared styles here if needed */
         </style>
       </head>
       <body>${html}</body>
     </html>
     `;
   };
   ```
   - Do **not** reconstruct HTML from data—always serialize the actual rendered output.

3. **Preview and Download Logic:**
   - The **Preview** function should open a new window, write the output of `getBuilderHtml()`, and call `.close()` on the document.
   - The **Download HTML** function should use the same output to create a Blob and trigger download.

4. **[Optional for this version]**
   - Just use the actual DOM’s `outerHTML` with any essential shared styles in a `<style>` block in the head. Note: Visual fidelity relies on the classes and styles present at runtime.

---

🧪 Testing Instructions:
- Add a component in the builder and visually style it.
- Export HTML and open the file in Chrome.  
- The result should look the same as in the builder (except for possible loss of styles if using class-based frameworks; we’ll address this in a future update).
- The preview and exported file should now be the same as the builder canvas.

---

📌 Constraints:
- Do not use the old mapping/conversion function for export.
- Do not call backend or server endpoints for export.
- All export/preview logic must be client-side and based on DOM serialization.
- Note/document any class-based or external style issues for future work.

---

Once this is working, we can revisit computed style inlining or library-based approaches for broader compatibility.
