
Add Star, Filter, and Restore features
======================================

Part A – Backend
----------------

### 1. Update Prisma schema
`Image` already has:
```prisma
starred   Boolean   @default(false)
deletedAt DateTime?
```

### 2. Endpoints

| Route | Method | Purpose |
|-------|--------|---------|
| `/api/image/:id/star` | PATCH | Body `{ starred:boolean }` |
| `/api/image/:id/trash` | PATCH | Body `{ toTrash:boolean }` → if true set `deletedAt=now()` else `deletedAt=null` |
| `/api/images/bulk` | PATCH | Body `{ ids:string[], op:"star"|"unstar"|"trash"|"restore" }` |

Implementation snippets:

```ts
app.patch("/api/image/:id/star", async (req,res)=>{
  await prisma.image.update({
    where:{ id:req.params.id },
    data:{ starred:req.body.starred }
  });
  res.json({ ok:true });
  push("imageUpdated",{ id:req.params.id, starred:req.body.starred });
});

app.patch("/api/image/:id/trash", async (req,res)=>{
  const toTrash = req.body.toTrash;
  await prisma.image.update({
    where:{ id:req.params.id },
    data:{ deletedAt: toTrash ? new Date() : null }
  });
  res.json({ ok:true });
  push("imageUpdated",{ id:req.params.id, deletedAt: toTrash ? Date.now() : null });
});

app.patch("/api/images/bulk", async (req,res)=>{
  const { ids, op } = req.body;
  if(!ids?.length) return res.status(400).json({msg:"no ids"});
  const data:any = {};
  if(op==="star")        data.starred = true;
  if(op==="unstar")      data.starred = false;
  if(op==="trash")       data.deletedAt = new Date();
  if(op==="restore")     data.deletedAt = null;
  await prisma.image.updateMany({ where:{ id:{ in:ids }}, data });
  res.json({ ok:true });
  ids.forEach(id=> push("imageUpdated",{ id, ...data }));
});
```

### 3. Gallery filter params
Extend existing `/api/gallery`:

```
/api/gallery?starred=true
/api/gallery?trash=true
```
Return `where.starred=true` or `deletedAt != null`.

Part B – Front‑end
------------------

### 1. Toolbar controls
In `GalleryPage` add filter buttons:

```tsx
const [filter,setFilter] = useState<"all"|"starred"|"trash">("all");
<ToggleGroup value={filter} onValueChange={setFilter}>
  <Toggle value="all">All</Toggle>
  <Toggle value="starred">Starred</Toggle>
  <Toggle value="trash">Trash</Toggle>
</ToggleGroup>
```
Pass as queryKey to `useInfiniteQuery`.

### 2. Star / Restore buttons
`ImageCard` overlay:

```tsx
{mode!=="trash" && (
  <button onClick={()=> mutateStar(image.id, !image.starred)}>
    {image.starred ? <Star fill="currentColor"/> : <Star/>}
  </button>
)}
{filter!=="trash" && (
  <button onClick={()=> mutateTrash(image.id,true)}><Trash/></button>
)}
{mode==="trash" && (
  <button onClick={()=> mutateTrash(image.id,false)}><Undo2/> </button>
)}
```

Hooks:

```tsx
const mutateStar  = useMutation(id=> api.patch(`/image/${id}/star`,{starred}));
const mutateTrash = useMutation((id,toTrash)=> api.patch(`/image/${id}/trash`,{toTrash}));
```

### 3. Bulk actions
Checkbox on tile sets `selectedIds`.  
Toolbar shows:
```tsx
<Button onClick={()=> bulk("star")}>Star</Button>
<Button onClick={()=> bulk("unstar")}>Unstar</Button>
<Button onClick={()=> bulk(filter==="trash"?"restore":"trash")}>
  {filter==="trash"?"Restore":"Trash"}
</Button>
```
`bulk` posts to `/api/images/bulk`.

### 4. Real‑time update
WebSocket `imageUpdated` handler merges delta into React‑Query cache.

Part C – Minor fixes
--------------------
1. **costTokens**: remove unused column or compute from size × quality table; until then hide in UI.
2. **uploads in git**: add `/uploads/**` to `.gitignore`.
3. **Star icon mismatch**: use lucide `Star` / `StarOff` for clarity.

Apply these changes; Star, filter, bulk and restore will work across Create, Gallery and Trash views.
