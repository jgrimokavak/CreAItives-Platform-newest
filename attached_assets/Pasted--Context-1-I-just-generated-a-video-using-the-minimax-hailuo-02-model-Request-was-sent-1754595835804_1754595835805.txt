# Context
# 1. I just generated a video using the minimax/hailuo-02 model:
#    • Request was sent to the API at 2025-08-07T19:36:26.986000Z  
#    • Prediction completed at 2025-08-07T19:39:46.040643Z (≈199 sec)  
#    • JSON response from Replicate.com:
#    ```json
#    {
#      "id": "j1rh5m76d9rma0crgr4bzgbrr0",
#      "input": {
#        "prompt": "a person driving a toyota corolla",
#        "duration": 6,
#        "resolution": "1080p",
#        "prompt_optimizer": true
#      },
#      "status": "succeeded",
#      "output": "https://replicate.delivery/.../tmpznslnnx7.mp4",
#      "completed_at": "2025-08-07T19:39:46.040643Z",
#      "urls": {
#        "get": "https://api.replicate.com/v1/predictions/j1rh5m76d9rma0crgr4bzgbrr0"
#      }
#    }
#    ```
# 2. The video job finished but never appeared in our gallery—requests are sent correctly, but there is no logic polling `/api/video/status` or fetching the final `output` URL to save/display it.
# 3. Replicate jobs for minimax/hailuo-02 take 3–6 minutes, so our client must poll asynchronously until completion.

Objective:  
1. Remove Veo2, Veo3, and Veo3 Fast from the model registry and dropdown.  
2. Improve the `/video` page UX with a clear, sectioned layout (Projects → Model → Prompt/(AI Enhance) → Advanced Settings → Generate).  
3. Implement asynchronous polling for Replicate predictions:
   - After enqueueing a job, periodically `GET` the prediction’s `urls.get` endpoint until `status === "succeeded"`.  
   - On success, retrieve `output`, save the video under `/<userId>/<projectId>/videos/...`, and update the gallery data so it appears automatically.  
   - Handle errors (`status === "failed"`) with user-friendly messages.  
4. Ensure a test run with minimax/hailuo-02 (3–6 min) will surface the completed video in both `/gallery` and the project-scoped list on `/video`.

Testing:  
- Confirm the model dropdown no longer includes Veo entries.  
- Verify the new, intuitive form layout with collapsible advanced settings and disabled “Generate” until required fields are filled.  
- Submit a minimax/hailuo-02 job and watch the client poll—once the job completes per the JSON example, the video should appear in the gallery without a manual refresh.  
- Simulate a failure (e.g. incorrect API key) and verify an error banner displays.

Reminders & Constraints:  
- Do not touch unrelated pages or routes.  
- Keep dynamic form generation logic intact.  
- Use TypeScript code fences (` ```ts `) only for code snippets.  
- All changes should live under `/video`, and `npm run dev` must build and run without errors.  
