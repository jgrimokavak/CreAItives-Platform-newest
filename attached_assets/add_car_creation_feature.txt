
Add “Car Creation” page powered by Imagen‑3
==========================================

Overview
--------
New tab under **Create** called **Car Creation** that lets the user pick car
attributes, an aspect ratio, and a background style (“White” vs “HUB”), then
generates a hyper‑realistic car image using Replicate **google/imagen‑3**.

Key requirements
----------------
* Model fixed: `google/imagen-3` (latest version).
* No free‑text prompt, no seed, no angle input.
* Two prompt templates (white / hub) with placeholders for year, make, model,
  body_style, color.
* Dropdown lists for **Make** and **Model** are populated from a DB table that
  can be bulk‑imported from a CSV.
* Generated image appears in the Create panel and *is* saved to Gallery (normal
  pipeline) with model `"imagen-3-car"`.

Part A – Database for car lists
-------------------------------
1. **Schema**
   ```prisma
   model CarMake {
     id    String   @id @default(uuid())
     name  String   @unique
     models CarModel[]
   }

   model CarModel {
     id       String   @id @default(uuid())
     name     String
     makeId   String
     CarMake  CarMake  @relation(fields:[makeId], references:[id], onDelete:Cascade)

     @@index([makeId])
     @@unique([name, makeId])
   }
   ```

2. **CSV upload endpoint (admin)**
   ```ts
   // POST /api/admin/car-csv
   // body: multipart form file=csv
   // CSV columns: make,model
   // replace existing tables
   ```
   Parse with `fast-csv`, batch insert via Prisma `createMany()`.

3. **Public endpoints**
   ```ts
   GET /api/cars/makes        -> [{id,name}]
   GET /api/cars/models?make= -> [{id,name}]
   ```

Part B – Prompt templates
-------------------------
```ts
const PROMPTS = {
  white: `A hyper-realistic photo of a modern {{year}} {{make}} {{model}} {{body_style}} with metallic {{color}} paint, parked indoors in a photography studio under cool artificial lighting. The front of the car is positioned at a 35-degree angle from the camera, facing slightly to the left, clearly showing both front headlights and the right side of the vehicle. The headlights are turned on. The side windows are fully tinted with black film. The car is placed on a seamless pure white backdrop that extends from the floor to the wall, creating a smooth and continuous surface with no visible edges, textures, or marks. The lighting is soft and even, casting subtle shadows that emphasize the vehicle's contours and details. The image has professional quality similar to an official dealership promotional photo. ultra-realistic lighting, 8k, no license plate, blank license plate.`,

  hub: `A hyper-realistic photo of a modern {{year}} {{make}} {{model}} {{body_style}} with metallic {{color}} paint, parked indoors in a photography studio under cool artificial lighting. The front of the car is positioned at a 35-degree angle from the camera, facing slightly to the left, clearly showing both front headlights and the right side of the vehicle. The headlights are turned on. The side windows are fully tinted with black film. The floor is matte dark gray, smooth and clean, with no visible marks, and has a circular shape. The background wall is completely white and uniform, with no decorative elements or visible textures, providing a clean and neutral backdrop that highlights the car. The lighting is soft and even, casting subtle shadows on the floor that emphasize the vehicle's contours and details. The image has professional quality similar to an official dealership promotional photo. no license plate, blank license plate.`
};
```

Part C – /api/car-generate
--------------------------
```ts
app.post("/api/car-generate", async (req,res)=>{
  const { makeId, modelId, year, color, body_style, aspect_ratio, bg } = req.body; // bg = "white" | "hub"

  const make  = await prisma.carMake.findUnique({ where:{ id: makeId }});
  const model = await prisma.carModel.findUnique({ where:{ id: modelId }});

  const prompt = Mustache.render(PROMPTS[bg], {
    year, make:make!.name, model:model!.name, body_style, color
  });

  const rsp = await replicatePredict("google/imagen-3", {
    prompt,
    aspect_ratio,
    negative_prompt: "",          // none
    safety_filter_level: "block_only_high"
  });

  // persists via existing persistImage()
  const image = await persistImage(rsp.outputBase64, {
    prompt,
    params:{ aspect_ratio, bg },
    model:"imagen-3-car",
    userId:"demo",
    sources:[]
  });

  res.json({ image });
});
```

Part D – Front‑end UI
---------------------
1. **Sidebar**  
   `<SidebarLink to="/car" icon={<Car/>}>Car Creation</SidebarLink>`

2. **CarCreationPage.tsx**
   *Form fields*
   ```
   Make         (Select)  -> fetch /api/cars/makes
   Model        (Select)  -> fetch /api/cars/models?make=
   Year         (Input number 1990‑2025)
   Body Style   (Input text or dropdown)
   Color        (Color picker or input text)
   Background   (Segmented control: White | HUB)  // default White
   Aspect Ratio (Select 1:1, 16:9, 9:16, 3:4, 4:3)
   ```
   *Generate* button posts JSON to `/api/car-generate`.
   On success, show image + **Download** & **Add to Gallery** (already saved).

3. **ImageCard “🚗” button**
   Add small car icon to open CarCreationPage with make & model pre‑selected.

Part E – Dynamic form validation
--------------------------------
`carSchema` (Zod) with the above required fields; client validates before submit.

Part F – Testing checklist
--------------------------
* Upload CSV with 2000 rows → makes/models populate.  
* Pick Toyota / Corolla / 2022 / White bg → generates image, saved to Gallery.  
* Toggle HUB background → generates second image.  
* Search gallery “Toyota Corolla” returns both images.

Deliverables
------------
* Prisma migration, endpoints `/api/admin/car-csv`, `/api/cars/*`, `/api/car-generate`
* Mustache prompt templates.
* New page `CarCreationPage`.
* Updated sidebar and ImageCard buttons.
