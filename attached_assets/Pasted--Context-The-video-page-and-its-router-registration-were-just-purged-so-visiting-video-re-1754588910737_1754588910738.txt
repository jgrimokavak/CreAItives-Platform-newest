# Context
# The `/video` page and its router registration were just purged, so visiting `/video` returns a 404.
# We need to recreate and register the `/video` route before building the new video-generator UI.

Objective: On the existing `/video` path, scaffold and implement a dynamic, model-driven video creation UI that integrates with our current gallery, storage, and project systems.

0. Recreate & Register `/video` Page  
   - Create a new page component at `client/src/pages/VideoPage.tsx`.  
   - In your main router file (e.g. `client/src/App.tsx` or `client/src/pages/_app.tsx`), import `VideoPage` and add a route for `/video` so it no longer 404s.

1. Model Registry & Dynamic Form  
   - Read the central model registry (e.g. `server/config/models.ts` or DB) to discover available video models and their schemas.  
   - On `/video`, render a dropdown of models. When a model is selected, dynamically generate form fields (text, sliders, file‐upload for `referenceImage`, etc.) based purely on that model’s schema.  
   - Adding a new model to the registry should surface its form on `/video` without manual UI edits.

2. AI Enhance Integration  
   - Hook the same “AI Enhance” endpoint and logic from `/create`: send prompt (and reference image, if any) to that service and replace the input with the enhanced result.  
   - Add `docs/video-model-best-practices.md` listing per-model tips (prompt length, keywords, reference-image guidance).

3. Project Management  
   - Reuse our existing projects API/tables so users can select or create a project at the top of `/video`.  
   - Tag every video generation job with `projectId` and `userId`.  
   - When switching projects, the form remains but the gallery below shows only that project’s videos.

4. Storage & Gallery Integration  
   - Inspect image storage logic (e.g. under `/<userId>/<projectId>/images/...`) in `server/storage.ts`.  
   - Store new videos under the same folder structure: `/<userId>/<projectId>/videos/...`.  
   - Do **not** build a separate gallery on `/video`—instead, reuse the existing `/gallery` data-fetch code so videos appear alongside images in the main gallery.  
   - On the `/video` page, embed or link the gallery component but filter it to show only video entries for the selected project.

5. Backend Endpoints  
   - Implement API routes to enqueue video jobs, poll for status, and return final URLs.  
   - Persist jobs in the `videos` table, emit status updates via websocket or polling, and point URLs to our shared bucket.

6. Future Vision (Documentation Only)  
   - In `docs/video-vision.md`, sketch high-level goals—frame extraction, plugin hooks, seamless new-engine support—without mandating implementation details.

Testing & Validation:  
- Confirm `/video` now renders the new page component (no more 404).  
- Add a dummy model to the registry → its form appears on `/video`.  
- Use AI Enhance on a prompt + reference image.  
- Trigger a test job → file lands in the correct bucket/folder and shows up in `/gallery` under the chosen project.  
- Switch projects → ensure isolation of video listings.

Reminders & Constraints:  
- Work only under `/video`—do not introduce a new path.  
- Preserve all existing gallery and image features.  
- Use TypeScript code fences (` ```ts `) for any snippets.  
- Ensure `npm run dev` builds and runs without errors.  
