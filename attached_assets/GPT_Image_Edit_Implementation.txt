
GPT‑Image‑1 Image‑Edit Feature — Implementation Plan
===================================================

Overview
--------
Add “Create image edit” using **OpenAI GPT‑Image‑1** only.

Backend (Express + TypeScript)
------------------------------

1. `server/openai.ts`
   ```ts
   import fetch from "node-fetch";
   import FormData from "form-data";
   (globalThis as any).fetch    = fetch;
   (globalThis as any).FormData = FormData;

   import OpenAI, { toFile } from "openai";
   export const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY! });
   ```

2. `server/routes.ts`
   *Add new endpoint*  
   ```ts
   app.post("/api/edit-image", async (req, res) => { … });
   ```

   ### Request validation (Zod)
   ```ts
   const bodySchema = z.object({
     images:  z.array(z.string()).min(1).max(16),         // base64 (may include data‑URL prefix)
     prompt:  z.string().min(1).max(32000),
     size:    z.enum(["auto","1024x1024","1536x1024","1024x1536"]),
     quality: z.enum(["auto","high","medium","low"]).default("auto"),
     n:       z.coerce.number().int().min(1).max(10).default(1),
     mask:    z.string().nullable().optional()
   });
   ```

   ### Processing flow
   ```ts
   const { images, prompt, size, quality, n, mask } = bodySchema.parse(req.body);

   const tmpDir = path.join(__dirname, "../temp");
   fs.mkdirSync(tmpDir, { recursive: true });

   // write each image to PNG
   const imgPaths = images.map((b64, i) => {
     const buf = Buffer.from(b64.replace(/^data:.*;base64,/, ""), "base64");
     const p   = path.join(tmpDir, `img_${Date.now()}_${i}.png`);
     fs.writeFileSync(p, buf);
     return p;
   });

   // resolve mask
   let maskPath: string;
   if (mask) {
     maskPath = path.join(tmpDir, "mask.png");
     fs.writeFileSync(maskPath, Buffer.from(mask.replace(/^data:.*;base64,/, ""), "base64"));
   } else {
     const { width, height } = await sharp(imgPaths[0]).metadata();
     const blank = await sharp({
       create: { width, height, channels: 4, background: { r: 0, g: 0, b: 0, alpha: 0 } }
     }).png().toBuffer();
     maskPath = path.join(tmpDir, "mask.png");
     fs.writeFileSync(maskPath, blank);
   }

   // build uploadables
   const uploadables = await Promise.all(imgPaths.map(p => toFile(fs.createReadStream(p))));
   const maskUpload  = await toFile(fs.createReadStream(maskPath));

   // OpenAI call
   const rsp = await openai.images.edit({
     model:  "gpt-image-1",
     image:  uploadables,
     mask:   maskUpload,
     prompt,
     n,
     size,
     quality
   });

   const out = rsp.data.map((d, i) => ({
     id:        `img_${Date.now()}_${i}`,
     url:       `data:image/png;base64,${d.b64_json}`,
     prompt,
     size,
     model:     "gpt-image-1",
     createdAt: new Date().toISOString()
   }));

   res.json({ images: out });
   // cleanup in finally { imgPaths.forEach(fs.unlinkSync); fs.unlinkSync(maskPath); }
   ```

Shared Package
--------------
`shared/schema.ts` — export `editImageSchema` identical to `bodySchema` for client‑side validation.

Frontend (React / Vite)
-----------------------
1. **UI controls**
   * Add “Generate” / “Edit” toggle.
   * In **Edit** mode:
     * Allow 1–16 image files (png/webp/jpg ≤ 25 MB).
     * Optional mask uploader (PNG).
     * Dropdowns: size (`auto`, `1024×1024`, `1536×1024`, `1024×1536`),
       quality (`auto`, `high`, `medium`, `low`), `n` (1‑10).

2. **Validation**
   * Use `editImageSchema` before POSTing.

3. **Request build**
   ```ts
   const clean = (str:string) => str.replace(/^data:.*;base64,/, "");
   body = {
     images: selectedFiles.map(f => clean(previews[f.id])),
     prompt,
     model: "gpt-image-1",          // hidden constant
     size,
     quality,
     n: n.toString(),
     mask: maskPreview ? clean(maskPreview) : null
   };
   fetch("/api/edit-image", { method:"POST", headers:{ "Content-Type":"application/json" }, body: JSON.stringify(body) })
   ```

4. **Display**
   Render returned `images[].url` directly in the gallery.

Manual Test Matrix
------------------
| Case | #Imgs | Mask | Expect |
|------|-------|------|--------|
| 1 PNG | none | edit succeeds |
| 3 JPGs | blank mask | composite succeeds |
| 1 PNG + user mask | masked replace only |
| 17 images | backend 400 |
| wrong size param | 400 |

Documentation
-------------
Create **docs/EDIT_API.md** with:
* Endpoint: POST /api/edit-image
* JSON schema
* Sample curl
* Limits (size, count, mask rules)

Deliverables
------------
* Updated codebase (server, shared, client)
* `docs/EDIT_API.md`
* Successful manual tests (console logs show OpenAI `b64_json` decoded)
