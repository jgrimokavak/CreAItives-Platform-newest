# GOAL
1) On the **Create** tab, a project is **preselected by default** and the app **remembers** the last used project across sessions. 
2) Replace the basic **AI Model** dropdown with a polished **Model Selector** (card-style) showing name, short description, key specs, and sample/notes. Must integrate with the existing form and submit the same `model` value.
# CONTEXT
Page: `client/src/pages/VideoPage.tsx` (Create tab = form left, Project Panel right, Results below). 
Form already works with `react-hook-form` and sends `projectId`, `prompt`, `model`, `resolution`, `duration`, etc. 
We must NOT break the payload or existing generate flow. 
No dependency changes.
---
## PART A — Default project preselect + remember last used
### Requirements
On Create tab load:
If `localStorage.lastSelectedProjectId` exists **and** still matches an existing project → **select it**.
Else, **select the first project** returned by `/api/projects` (whatever order the list comes in).
If no projects exist, fall back to **Unassigned** (`projectId = null`).
Whenever the user changes project in the Create tab → update:
React state for the form’s `projectId`
`localStorage.lastSelectedProjectId`
If the remembered project no longer exists → gracefully select the first available project (or Unassigned) and update `localStorage`.
### Implementation notes
Keep all existing hooks (React Query) and the current project dropdown. 
The right Project Panel should immediately render the selected project’s videos after preselect.
### Acceptance
Opening the Create tab shows a selected project and populated right panel (not empty).
Switching project, refreshing the page, and coming back restores the last choice.
Generating a video uses the selected project automatically.
---
## PART B — Enhanced AI Model Selector (card-style)
### Requirements
Replace the basic model `<select>` with a **Model Selector** component rendered where the dropdown is now.
**Data source** (config file so we can grow later):
Create `client/src/config/models.ts` exporting an array of model definitions:
    ```ts
    export type ModelDef = {
      id: string;           // value sent to backend (e.g., 'hailuo-02')
      name: string;         // "Minimax HaiLuo-02"
      summary: string;      // short blurb (1 line)
      details?: string[];   // bullet points (max res, typical processing time, strengths)
      recommended?: boolean;
      sampleThumbUrl?: string; // optional small image
      badges?: string[];    // e.g., ['Cinematic', 'Best Quality']
    };
    export const VIDEO_MODELS: ModelDef[] = [
      {
        id: 'hailuo-02',
        name: 'Minimax HaiLuo-02',
        summary: 'High-quality video generation (3–6 min typical).',
        details: [
          'Best for cinematic shots and natural lighting',
          'Good motion consistency for 5–8s clips',
          'Typical ranges: 512p–1080p',
        ],
        recommended: true,
        badges: ['Cinematic', 'High Quality']
      },
      // TODO: add more models as they become available
    ];
    ```
Ensure the `id` equals what your backend expects today (e.g., currently sent value for Minimax).
**Component**: `client/src/components/ModelSelector.tsx`
Props:
    ```ts
    interface ModelSelectorProps {
      value: string;                         // current selected model id
      onChange: (modelId: string) => void;   // call when selection changes
      disabled?: boolean;
    }
    ```
Renders a **grid of model cards** (1 column on mobile, 2–3 on desktop).
Each card shows:
Name + short summary
(Optional) sample thumbnail or icon
Small badges (e.g., Cinematic, High Quality)
A subtle details toggle or tooltip with the bullet points
The **selected** card is visually highlighted and keyboard-navigable:
Arrow keys move focus between cards
Enter/Space **selects** the focused card
`aria-pressed` for accessibility
When a card is selected → call `onChange(model.id)`.
**Form integration** (in `VideoPage.tsx` Create form):
Bind the selector to the existing `model` field in `react-hook-form`:
    ```tsx
    const { control, setValue, watch } = useForm(/* existing */);
    const selectedModel = watch('model');
    <ModelSelector
      value={selectedModel}
      onChange={(id) => setValue('model', id, { shouldDirty: true })}
    />
    ```
Keep a **compact fallback**: if something fails, fall back to the original `<select>` (guarded with a simple conditional).
**Styling**
Use your existing shadcn + Tailwind. Keep it clean and consistent with the app.
Cards: hover outline, selected ring, small spacing; don’t blow up the layout.
Show a micro “Recommended” tag on `recommended` models.
### Acceptance
The Model Selector appears in place of the dropdown.
Selecting a card updates the form’s `model` field and the submitted payload is **unchanged** (same `model` id).
Keyboard navigation works (Tab focus + arrow keys + Enter/Space to select).
Minimax HaiLuo-02 shows a proper summary + a few details; the selector looks polished.
If the selector cannot render, the old `<select>` appears as a safe fallback.
---
## DO NOTS
No new dependencies.
Do not touch Gallery behavior, routes, or schema.
Do not alter the generate payload format beyond the visual selector.
---
## POST-CHECK
Go to Create tab:
A project is already selected → right panel populated.
Pick a model via a card → Generate → backend receives the same `model` id as before.
Refresh → last used project is preserved