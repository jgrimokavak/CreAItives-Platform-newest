
413 “request entity too large”
=============================

Cause
-----
Sending 16 images (≤25 MB each) as base‑64 JSON balloons the payload
(~33 % bigger). Body‑parser limit is still 30 MB, so Express rejects with 413.

Change upload transport to multipart/form‑data
----------------------------------------------
### Front‑end (Generate & Edit forms)

```ts
const form = new FormData();
form.append("prompt", prompt);
form.append("size", size);
form.append("quality", quality);
form.append("n", n.toString());

selectedFiles.forEach(f => form.append("image", f));   // raw File objects
if (maskFile) form.append("mask", maskFile);

fetch("/api/edit-image", { method:"POST", body: form });
```
*No base‑64 conversion; no JSON.*

### Back‑end (`routes.ts`)

1. Install & import multer
   ```ts
   import multer from "multer";
   const upload = multer({
     limits: { fileSize: 26 * 1024 * 1024 },   // strict 25 MB + buffer
   });
   ```

2. Apply to both routes
   ```ts
   app.post("/api/edit-image",
     upload.fields([
       { name: "image", maxCount: 16 },
       { name: "mask",  maxCount: 1  }
     ]),
     async (req,res)=>{ … });
   ```

3. Access files
   ```ts
   const imgFiles = (req.files as any).image as Express.Multer.File[];
   const maskFile = (req.files as any).mask?.[0];
   ```

4. Wrap for OpenAI
   ```ts
   const uploadables = await Promise.all(
     imgFiles.map(f => toFile(fs.createReadStream(f.path), f.originalname, { type: f.mimetype }))
   );
   if (maskFile) editParams.mask = await toFile(fs.createReadStream(maskFile.path), maskFile.originalname, { type: maskFile.mimetype });
   ```

5. Clean up temp files (multer stores in memory/tmp directory).

6. Remove `express.json({limit:"30mb"})` size worries.

Validation
----------
* Still enforce max 16 images & total `n ≤ 10`.  
* Reject if any file >25 MB or mimetype not png/jpg/webp.

Outcome
-------
Raw multipart request streams files, payload stays under nginx/Express limits,
413 disappears even with 16 × 25 MB images plus `n = 10`.
