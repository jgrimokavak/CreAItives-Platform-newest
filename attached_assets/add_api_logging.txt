
Add temporary API logging
=========================

Goal
----
Expose real‑time logs of the request we send to OpenAI and the response we receive, viewable inside the site while debugging. Logs can be removed later.

Backend – server/logger.ts
--------------------------
```ts
// simple ring‑buffer logger (max 200 entries)
type LogEntry = {
  ts: string;
  direction: "request" | "response" | "error";
  payload: any;         // trimmed / redacted
};
const buffer: LogEntry[] = [];
export const log = (entry: LogEntry) => {
  if (buffer.length >= 200) buffer.shift();
  buffer.push(entry);
};
export const getLogs = () => [...buffer].reverse(); // newest first
```

Integrate in routes.ts
----------------------
```ts
import { log } from "./logger";

// before calling openai.images.edit
log({
  ts: new Date().toISOString(),
  direction: "request",
  payload: {
    model: "gpt-image-1",
    prompt,
    n, size, quality,
    images: imgPaths.length,
    mask: true
  }
});

const rsp = await openai.images.edit({ … });

log({
  ts: new Date().toISOString(),
  direction: "response",
  payload: {
    status: rsp ? "ok" : "unknown",
    bytes: rsp.data[0].b64_json.length
  }
});
```

Log errors:
```ts
catch (err) {
  log({ ts:new Date().toISOString(), direction:"error", payload: err });
  throw err;
}
```

New route for client
--------------------
```ts
app.get("/api/logs", (_req,res) => {
  res.json({ logs: getLogs() });
});
```

Frontend ‑ component
--------------------
`client/src/components/ApiLogConsole.tsx`
```tsx
import { useEffect, useState } from "react";

export default function ApiLogConsole() {
  const [logs,setLogs] = useState<any[]>([]);

  useEffect(()=>{
    const tick = () => fetch("/api/logs")
      .then(r=>r.json())
      .then(d=>setLogs(d.logs));
    tick();
    const id = setInterval(tick, 2000);
    return () => clearInterval(id);
  },[]);

  return (
    <div style={{maxHeight:400,overflowY:"auto",fontFamily:"monospace",background:"#111",color:"#0f0",padding:8}}>
      {logs.map((l,i)=>(
        <div key={i}>
          <span>{l.ts}</span> │ <span>{l.direction.toUpperCase()}</span> │{" "}
          <code>{JSON.stringify(l.payload).slice(0,300)}</code>
        </div>
      ))}
    </div>
  );
}
```

Add a toggle
------------
In `App.tsx` (or header), add a button “Logs” that shows/hides `<ApiLogConsole />`.

Done
----
Now every OpenAI request/response/error is visible in real‑time. Remove `logger.ts`, `/api/logs`, and the component when no longer needed.
