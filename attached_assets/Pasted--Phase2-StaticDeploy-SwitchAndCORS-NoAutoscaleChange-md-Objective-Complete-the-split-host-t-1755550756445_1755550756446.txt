# Phase2_StaticDeploy_SwitchAndCORS_NoAutoscaleChange.md
"""
Objective: Complete the split: host the SPA via a Static Deployment (zero compute) and keep only the API on Autoscale. Enable strict CORS allowlist, point the client to the API domain via VITE_PublicApiBaseUrl, remove server-side SPA hosting, and promote to production. Do NOT modify Autoscale settings (already 1 vCPU / 2 GiB, max=1). Preserve all functionality and provide clear rollback.

Assumptions (verify first; adapt if different):
- Phase 1 artifacts exist:
  - client/src/bootstrap/patchFetchWithPublicApiBaseUrl.ts
  - server/middleware/enforceCorsForStaticOrigin.ts
  - /healthz endpoint
  - .env.example includes VITE_PublicApiBaseUrl and Allowed_Web_Origins
- SPA build outputs to ./dist (or equivalent)
- API routes live under /api/*

Plan_Outline (print before changes):
1) Preflight validation (no edits): confirm Phase 1 artifacts and record current Autoscale config.
2) Build SPA and create Static Deployment (staging) with SPA rewrite (/* → /index.html).
3) Wire cross-origin: set VITE_PublicApiBaseUrl for the static build; enable CORS allowlist on the API with Allowed_Web_Origins.
4) Staging smoke tests: E2E flows, deep-link refresh, CORS checks.
5) Remove server SPA hosting (keep only /api/*).
6) Promote to production domains and monitor.
7) Rollback plan documented.

Tasks:

0) Create Migration_Plan_Phase2.md (planning-first)
- Document:
  - Client entry, build dir, current server static handlers (express.static + SPA catch-all).
  - Proposed static staging URL and API URL placeholders.
  - File touch list + commits.
  - Current Autoscale config (read-only): confirm 1 vCPU / 2 GiB, max_instances=1.
  - Rollback steps.
- Save at repo root.

1) Preflight_Validation_NoChanges
- Assert the following exist; if absent, create minimal equivalents and document deviations:
  - patchFetchWithPublicApiBaseUrl
  - enforceCorsForStaticOrigin
  - /healthz route (200 OK)
  - .env.example keys for VITE_PublicApiBaseUrl and Allowed_Web_Origins

2) Build_Static_SPA_Artifact
- Run SPA build (e.g., npm run build) and confirm output dir; record in plan.

3) Create_Static_Deployment_Staging
- Replit Static Deployment:
  - Build command: SPA build command used above.
  - Publish directory: <detected_build_dir> (e.g., ./dist).
  - SPA Rewrite rule: /* → /index.html.
  - Capture the staging URL (e.g., https://app-staging.<replit-domain>) in the plan.

4) Wire_CrossOrigin_Env_And_CORS
- Client (static build):
  - Set build env: VITE_PublicApiBaseUrl=https://<API_DOMAIN_OR_AUTOSCALE_URL>
  - Rebuild SPA with this env so bundle targets the API.
- API (autoscale, no scaling changes):
  - Set Allowed_Web_Origins=https://<STATIC_STAGING_URL>
  - Mount CORS allowlist near the top of the server entry:
    ```ts
    // server/index.ts (or equivalent)
    import { enforceCorsForStaticOrigin } from "./middleware/enforceCorsForStaticOrigin";
    app.set("trust proxy", 1);
    app.use(enforceCorsForStaticOrigin());
    ```

5) Staging_Smoke_Tests
- From static staging URL:
  - App renders; HTML/CSS/JS served without API for index.html.
  - Feature flows call https://<API_DOMAIN>/api/... → 2xx.
  - Deep-link to nested route + hard refresh → loads via SPA rewrite.
- From an unauthorized origin, CORS blocks requests.
- /healthz returns 200.

6) Remove_Server_SPA_Hosting (after staging passes)
- Remove any SPA hosting from the API server:
  - express.static(...) that serves SPA bundle
  - catch-all that returns index.html for non-/api paths
- Keep only API routes under /api/*.
- Optional: explicit 404 for non-/api/* to make behavior obvious.

7) Promote_To_Production
- Domains:
  - Static: https://app.<YOUR_DOMAIN> → Static Deployment
  - API: https://api.<YOUR_DOMAIN> → Autoscale
- API env: Allowed_Web_Origins=https://app.<YOUR_DOMAIN>
- Rebuild static with VITE_PublicApiBaseUrl=https://api.<YOUR_DOMAIN> and redeploy.

8) Monitoring_And_Validation
- Verify:
  - App loads from static domain; API calls succeed.
  - Non-/api paths on API return 404 (expected).
  - Latency/error rate normal. (No autoscale changes required.)

9) Rollback_Plan
- To revert:
  - Re-enable server express.static + SPA catch-all; redeploy API.
  - Remove/relax CORS middleware.
  - Build SPA without VITE_PublicApiBaseUrl (empty) to return to same-origin serving.
  - Domain switch-back if needed.

Deliverables:
- Migration_Plan_Phase2.md
- Phase2_Change_Summary.md
- Updated .env.example with production placeholders:
  - VITE_PublicApiBaseUrl=https://api.<YOUR_DOMAIN>
  - Allowed_Web_Origins=https://app.<YOUR_DOMAIN>

Commits (use these exact, descriptive names):
- `PlanPhase2_StaticSplit_NoAutoscaleChange`
- `Enable_CORS_Allowlist_For_StaticOrigin`
- `Remove_Server_SPA_Hosting_Keep_API_Only`
- `Docs_Update_Phase2_Summary_And_Rollback`

Testing_Checklist (agent must run and report):
1) Static staging URL renders; deep-link refresh works.
2) All app features work from static → API domain; responses 2xx.
3) CORS: allowed origin passes; disallowed origin blocked.
4) After removing server SPA hosting: non-/api/* on API returns 404 (expected).
5) Production domains wired; builds use correct envs; end-to-end OK.
6) Post-change monitoring: compute units down due to static hosting; latency within baseline.

Constraints:
- Do not change UI, routes, or API contracts.
- Do not alter Autoscale configuration; only record it in the plan.
- If paths differ from assumptions, adapt minimally and document in the plan first.
"""
