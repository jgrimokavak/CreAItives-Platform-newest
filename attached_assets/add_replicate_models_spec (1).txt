
Add Replicate models with dynamic parameter UI
==============================================

Overview
--------
Integrate two Replicate models alongside GPT‑Image‑1.  
The model dropdown shows a short description; the parameter panel re‑renders
based on the selected model’s JSON schema. Hidden parameters use defaults.

Models
------

| key            | provider   | slug (+ auto‑latest version)           | visible controls | fixed defaults |
|----------------|------------|----------------------------------------|------------------|----------------|
| **gpt-image-1**| openai     | —                                      | prompt, size, quality, n | — |
| **imagen‑3**   | replicate  | `google/imagen-3`                      | prompt, aspect_ratio     | `safety_filter_level="block_only_high"` |
| **flux‑pro**   | replicate  | `black-forest-labs/flux-1.1-pro`       | prompt, aspect_ratio, seed | `output_format="png"`, `prompt_upsampling=false`, `safety_tolerance=2`, ignore `image_prompt` |

Descriptions (shown under select)
---------------------------------
* **GPT‑Image‑1** – most accurate, but slow.  
* **Imagen‑3** – accurate, fast, consistent, but not very creative.  
* **Flux‑Pro 1.1** – fast, creative, high‑quality; less prompt‑accurate.

Environment
-----------
```
REPLICATE_API_TOKEN=xxxxxxxxxxxxxxxxxxxxxxxx
```

Backend changes
---------------

1. **/config/models.ts**
   ```ts
   export const models = [
     {
       key: "gpt-image-1",
       provider: "openai",
       UI: { visible:["prompt","size","quality","n"] }
     },
     {
       key: "imagen-3",
       provider: "replicate",
       slug: "google/imagen-3",
       defaults:{ safety_filter_level:"block_only_high" },
       visible:["prompt","aspect_ratio"]
     },
     {
       key: "flux-pro",
       provider: "replicate",
       slug: "black-forest-labs/flux-1.1-pro",
       defaults:{
         output_format:"png",
         prompt_upsampling:false,
         safety_tolerance:2
       },
       visible:["prompt","aspect_ratio","seed"]
     }
   ];
   ```

2. **GET /api/models**
   ```ts
   app.get("/api/models", (_req,res)=>{
     res.json(models.map(m=>({
       key:m.key,
       provider:m.provider,
       schema:m.provider==="replicate"? m.schema : openaiSchema,
       visible:m.visible,
       defaults:m.defaults ?? {},
       description: descriptions[m.key]
     })));
   });
   ```
   *On first boot fetch Replicate schema via*
   ```ts
   const r = await fetch(`https://api.replicate.com/v1/models/${slug}`);
   const ver = (await r.json()).latest_version;
   m.version = ver.id;
   m.schema  = ver.openapi_schema.components.schemas.Input;
   ```

3. **POST /api/generate**
   ```ts
   const { modelKey, inputs } = req.body;
   const m = models.find(x=>x.key===modelKey);

   if (m.provider==="openai") {
     return handleOpenAI(inputs);
   } else {
     const body = { ...m.defaults, ...inputs };
     const rsp = await fetch("https://api.replicate.com/v1/predictions",{
       method:"POST",
       headers:{
         "Authorization":`Bearer ${process.env.REPLICATE_API_TOKEN}`,
         "Content-Type":"application/json"
       },
       body: JSON.stringify({
         version: m.version,
         input: body
       })
     }).then(r=>r.json());

     // poll until rsp.status==="succeeded"
     …
   }
   ```

Frontend changes
----------------

1. **ModelSelect**
   *Fetch `/api/models` on mount; store list in context.*  
   *Each option shows `label – short description`.*

2. **DynamicForm**
   ```tsx
   const { visible, schema, defaults } = currentModel;
   render properties in `visible` order:
     string  -> <Input/>
     enum    -> <Select/>
     integer -> <NumberInput/>
     boolean -> <Switch/>
   initialise with `defaults`.
   ```

3. **Submit handler**
   Build payload:
   ```ts
   const body = { modelKey:selected.key, inputs: formValues };
   ```
   Hidden defaults are added server‑side, so only send visible values.

4. **Validation**
   Use `zod` generated from the schema for client‑side check.

Testing matrix
--------------
* Imagen‑3 with aspect 16:9 succeeds, produces jpg URL.  
* Flux‑Pro with seed 42 and aspect 3:2 returns png.  
* GPT‑Image‑1 unchanged.  
* Switching models re‑renders form without stale fields.

Self‑check
----------
✔  No styling copied from Midjourney.  
✔  Token and defaults handled server‑side.  
✔  Replicate polling covers long jobs.  
✔  Client form generation uses schema, so new models can be added by config only.  
✔  Fallback if schema fetch fails (return 500 on /api/models fetch and hide model).  
✔  Create & Gallery integration unchanged.

Deliverables
------------
* `config/models.ts`
* routes `/api/models`, updated `/api/generate`
* React context `ModelCatalog`
* DynamicForm component
