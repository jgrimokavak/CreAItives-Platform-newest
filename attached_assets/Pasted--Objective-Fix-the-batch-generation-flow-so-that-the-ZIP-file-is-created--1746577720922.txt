=====================

Objective:
Fix the batch‐generation flow so that the ZIP file is created, served, and its URL returned to the client.

1. Add static file serving in Express
   - Open `app.ts` (or your main server file).
   - Insert the following at the top:
     ```ts
     import path from 'path';
     import express from 'express';
     ```
   - Below existing middlewares, add:
     ```ts
     app.use(
       '/downloads',
       express.static(path.join(__dirname, '../downloads'), {
         maxAge: '1h',
         index: false,
       })
     );
     ```
   - Save `app.ts`.

2. Ensure ZIP finalization and state update
   - Open the batch worker (`batchWorker.ts` or similar).
   - After downloading all images into `tmpDir`, insert:
     ```ts
     import fs from 'fs';
     import archiver from 'archiver';
     import path from 'path';

     const downloadDir = path.join(__dirname, '../downloads');
     const zipPath = path.join(downloadDir, `${jobId}.zip`);

     await new Promise<void>((resolve, reject) => {
       const output = fs.createWriteStream(zipPath);
       const archive = archiver('zip');
       output.on('close', () => resolve());
       archive.on('error', err => reject(err));
       archive.pipe(output);
       archive.directory(tmpDir, false);
       archive.file(path.join(tmpDir, 'failed_rows.json'), { name: 'failed_rows.json' });
       archive.finalize();
     });

     const zipUrl = `/downloads/${jobId}.zip`;
     await jobState.update(jobId, { zipUrl, status: 'finished' });
     ```
   - Save the worker file.

3. Return `zipUrl` from the status endpoint
   - Open your status route (`carBatchRoutes.ts` or equivalent).
   - Ensure the JSON response includes `zipUrl`:
     ```ts
     router.get('/api/batch/:jobId', async (req, res) => {
       const state = await jobState.get(req.params.jobId);
       res.json({
         total:   state.total,
         done:    state.done,
         failed:  state.failed,
         percent: Math.floor((state.done / state.total) * 100),
         zipUrl:  state.zipUrl || null,
       });
     });
     ```
   - Save the route file.

4. Update front-end to render download link
   - In `BatchProgress.tsx`, locate the render logic after polling.
   - Replace or add:
     ```tsx
     if (status.percent === 100 && status.zipUrl) {
       return (
         <a href={status.zipUrl} download>
           <button>Download ZIP</button>
         </a>
       );
     }
     ```
   - Save `BatchProgress.tsx`.

Testing:
- Upload a 3-row CSV → expect HTTP 202, poll to 100%, then see “Download ZIP” button.
- Click the button → expect the browser to download `<jobId>.zip`.
- Curl `https://<your-repl>.repl.co/downloads/<jobId>.zip` → expect `200 OK` and `Content-Type: application/zip`.
- Inspect `./downloads` on the server → confirm `<jobId>.zip` exists and contains PNGs + `failed_rows.json`.

Reminders & Constraints:
- Do not modify `ImageCard` or other unrelated components.
- Install `archiver` via npm: `npm install archiver`.
- Ensure `downloads` directory exists and is writable.
