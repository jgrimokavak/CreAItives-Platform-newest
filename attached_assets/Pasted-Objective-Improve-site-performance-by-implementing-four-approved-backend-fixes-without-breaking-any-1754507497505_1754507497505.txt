Objective: Improve site performance by implementing four approved backend fixes without breaking any existing features. Each fix must be applied carefully, tested individually, and only proceed to the next if the previous fix works as intended.

---

ðŸŸ© Step 1: Remove 5-Minute Auto-Refresh of Car Data
- Locate the current logic that automatically refreshes car data every 5 minutes (likely via a `setInterval` or cron-like mechanism).
- Remove or comment out the 5-minute refresh loop entirely.
- Keep the **existing manual refresh button** working exactly as it is.
- Optionally, set up a once-per-day refresh trigger using `setTimeout` or `cron`, but only if it's simple and non-blocking.
- Confirm that manual refresh still works and no background refresh happens.

---

ðŸŸ© Step 2: Optimize User Authentication Requests
- Identify the route(s) or middleware where user authentication is verified (e.g., `/api/auth/user`).
- Implement a **lightweight in-memory session cache** using a simple JavaScript object (or use `node-cache` if available).
- Store session data (e.g., user ID or validated token) after the first lookup, and reuse it for the duration of the session or request lifecycle.
- Add a basic TTL (e.g., 5 minutes) to avoid stale data.
- Ensure this cache does **not break logout**, session expiration, or multi-device logins.

---

ðŸŸ© Step 3: Reduce WebSocket Authentication Overhead
- Find the `io.on('connection')` logic in the WebSocket server.
- On initial connection:
  - Extract and validate the user's session or token.
  - If valid, store the user data on `socket.user`.
  - If invalid, reject the connection with `socket.disconnect(true)`.
- Inside all `socket.on('event')` handlers, replace repeated session checks with `socket.user` access.
- Carefully test that real-time features (chat, live updates, generation queue) still function as expected with correct user context.

---

ðŸŸ© Step 4: Remove Verbose Logging in Production
- Locate all `console.log()` statements that output:
  - Full request/response bodies
  - Debug information not needed in production
- Comment them out or wrap them in a check like `if (process.env.NODE_ENV !== 'production')`
- Keep only essential logs (e.g., `console.error`, unexpected failures).
- Optionally use a logger like `winston` for better control (but do not add unnecessary libraries if not already in use).

---

Testing
- After each step, restart the server and validate that nothing is broken.
- Make sure the site loads normally, auth still works, WebSocket features still run, and logging doesnâ€™t spam the console.

Reminders & Constraints
- Do not remove any existing routes, logic, or features.
- Do not change UI behavior unless specified.
- Make changes incrementally and keep comments for all edits so theyâ€™re easy to reverse if needed.

