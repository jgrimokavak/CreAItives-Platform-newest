Objective:
Refactor the Email Builder so that editor-only controls (delete icons, drag handles, subject input, etc.) are rendered only during editing, and are fully excluded from the exported or previewed HTML. This will ensure the exported email HTML is clean and contains only actual email content.

---

Migration Plan:

1. Introduce an "editing" mode or context:
   - Create a React Context or pass a boolean prop (e.g., editing={true}) throughout the Email Builder tree.
   - This flag should be true while building/editing, and false during export or when rendering a clean preview.

2. Update all component render logic:
   - For all components that currently render editor-only UI (drag handles, delete/trash icons, input fields for subject, etc.), conditionally render these elements ONLY if editing=true.
   - When editing=false, render only the pure email content:
     - Render the subject as plain text, not an <Input>.
     - Omit all UI affordances (drag handles, delete/trash icons, move dots, etc.).

3. Refactor parent/child component usage:
   - Make sure editing is consistently passed down to every relevant component/subcomponent, including wrappers like SortableEmailComponent.

4. Update builder and export logic:
   - When displaying the builder UI, set editing=true.
   - When exporting or capturing HTML for download, render a hidden or virtual version of the builder with editing=false and capture its DOM.

5. Test and verify:
   - In the builder UI, confirm all controls work as before.
   - In the exported HTML, confirm there are no icons, controls, or interactive elementsâ€”only the intended email content.
   - The email subject should render as plain text, not an input.

6. Clean up:
   - Remove any hacks or manual removals of DOM nodes. All conditional logic should rely on the editing flag/context.

---

Deliverable:
- The builder and exported HTML are now visually clean and editor-only controls never appear in the exported/previewed file.
- Editing/preview/export modes use the same component tree, only switching on editing mode as appropriate.
