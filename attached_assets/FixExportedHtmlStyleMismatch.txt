
filename: FixExportedHtmlStyleMismatch.tsx

🧠 Context:
We're building a visual Email Builder that allows users to design emails using React components. The design shown in the builder is correct, and the "Preview" version now also matches. However, the downloaded HTML file does **not** match the preview or the builder — styling is missing or broken, and layout structure differs.

The correct design is what the user sees **inside the builder canvas** and in the preview window (example: orange border around image). The exported HTML must reflect that design exactly.

---

🎯 Goal:
Fix the “Download HTML” functionality to ensure that the exported file is visually **identical** to the live builder preview, including styles, spacing, and visual structure.

---

🔍 Problem:
The HTML now downloads correctly, but it's visually different:
- CSS styles (like border radius, padding, borders) are missing or inconsistent.
- The layout looks broken or simplified.
- Likely cause: the export function is grabbing the HTML structure (via `outerHTML`) but not embedding the required styles into the HTML file.

---

✅ Fix:
1. Ensure you're using a `ref` (`builderRef`) to capture the actual rendered builder markup.
2. Modify `getBuilderHtml()` to **inline the required styles** directly inside the `<style>` tag in the `<head>` of the exported HTML. Do not rely on external CSS files or frameworks — some email clients ignore them.

Example:

```ts
const getBuilderHtml = () => {
  if (!builderRef.current) return '';
  const html = builderRef.current.outerHTML;
  return `<!DOCTYPE html>
  <html>
    <head>
      <meta charset="utf-8" />
      <meta name="viewport" content="width=device-width, initial-scale=1.0" />
      <title>${emailContent.subject}</title>
      <style>
        * { box-sizing: border-box; }
        body { margin: 0; padding: 0; font-family: sans-serif; }
        .component-class { padding: 24px; border-radius: 16px; }
        .image-bordered { border: 4px solid orange; border-radius: 20px; }
        button { background: #003FFF; color: white; padding: 12px 24px; border-radius: 8px; border: none; }
        /* Add any other styles used by your components */
      </style>
    </head>
    <body>${html}</body>
  </html>`;
};
```

3. If your builder uses Tailwind or scoped styles, consider extracting computed styles with a library like `juice` or manually writing CSS that matches the class outputs.
4. Optional: you can also clone the computed styles using `window.getComputedStyle()` and inject inline styles on each element, though embedding a shared style block is often cleaner for email clients.

---

🧪 Testing:
- Confirm the downloaded HTML file renders **exactly** like the builder canvas and preview window.
- Open the downloaded file in:
  • Chrome
  • Outlook or webmail (Gmail, Yahoo, etc.)
- Confirm the orange border, fonts, spacing, and layout are preserved.

---

📌 Constraints:
- Do not rely on linked CSS files.
- Ensure all necessary styles are inline or in a single `<style>` tag in the exported file.
- Avoid complex JavaScript logic inside the exported HTML.
