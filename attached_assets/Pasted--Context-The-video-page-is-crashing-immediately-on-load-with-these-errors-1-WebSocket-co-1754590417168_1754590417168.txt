# Context
# The `/video` page is crashing immediately on load with these errors:
# 1. WebSocket connection to `wss://localhost:undefined` invalid URL  
# 2. `TypeError: modelConfig.maxDuration.replace is not a function` in VideoPage.tsx  
# 3. `GET /api/projects` returns 500 Internal Server Error  
# We need a full diagnosis of client config, model registry types, and server routing to pinpoint the failures.

Objective: Run a diagnostic sweep of the `/video` feature and report back on every misconfiguration or code issue preventing it from rendering.

1. Client WebSocket Configuration  
   - Inspect `client/src/websocket.ts` (or wherever `setupWebSocket` lives).  
   - Check how you’re composing the WebSocket URL: environment variables (`VITE_WS_HOST`, `VITE_WS_PORT`) vs. `window.location`.  
   - Add console logs showing the final URL before constructing the `WebSocket`.  

2. Model Registry & `maxDuration`  
   - Open `server/config/models.ts` (or DB registry) and log the type and value of each model’s `maxDuration`.  
   - Confirm whether `maxDuration` is defined as a string (e.g. `"60s"`) or a number (`60`).  
   - If numeric, either cast to string in the client or change the registry to use strings.  

3. `/api/projects` Endpoint  
   - Verify that `server/routes/project-routes.ts` (or similar) exists and exports a GET `/api/projects` handler.  
   - In `server/app.ts` (or index), confirm `app.use('/api/projects', projectRoutes)`.  
   - Wrap the handler in a try/catch to log the full error stack.  
   - From a terminal, run `curl -v http://localhost:<port>/api/projects` and capture the raw error response.  

4. Server Logs & Stack Traces  
   - Tail your server logs (or check Replit’s debugger) to capture the 500 error payload and stack trace from `/api/projects`.  

5. Summarize Findings  
   - For each of the above, print out what you found (e.g. wrong URL, type mismatch, missing route), and suggest the minimal fix needed.

Testing:  
- After instrumentation, reload `/video` in the browser and collect console output and server logs.  
- Provide the logged URLs, types, and error stacks in your response so we can move to targeted fixes.
