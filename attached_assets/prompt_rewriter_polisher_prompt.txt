prompt_rewriter_polisher_prompt.txt
================================================

Objective:
Add an “Enhance Prompt” feature that rewrites the user’s text into a model‑specific, highly descriptive prompt (camera angles, lighting, colors, 8k references, composition) and optional negative prompt, adjusting wording for GPT‑Image‑1, Imagen‑3, or Flux‑Pro 1.1.

1. Back‑end: create `/api/enhance-prompt` endpoint
   - **File**: `routes/enhancePrompt.ts`
   - Register route in `app.ts` before the error handler.
   - Implementation:
     ```ts
     import { Router } from "express";
     import { z } from "zod";
     import { openai } from "@/lib/openai"; // wrapper you already use

     const router = Router();
     const bodySchema = z.object({
       text: z.string().min(3),
       model: z.enum(["gpt-image-1", "imagen-3", "flux-pro-1.1"]),
     });

     router.post("/api/enhance-prompt", async (req, res) => {
       const { text, model } = bodySchema.parse(req.body);

       const sysTpl = `You are an expert prompt engineer. Rewrite the user prompt so it is perfectly optimised for the {MODEL} image model, adding vivid camera angles, lighting, style adjectives, palette references, and an 8K quality hint. Return JSON with keys "prompt" and "negativePrompt".`;
       const system = sysTpl.replace("{MODEL}", model);

       const completion = await openai.chat.completions.create({
         model: "gpt-4o-mini",
         messages: [
           { role: "system", content: system },
           { role: "user", content: text },
         ],
         response_format: { type: "json_object" },
       });

       const json = JSON.parse(completion.choices[0].message.content);
       res.json(json);
     });

     export default router;
     ```
   - Remember to `app.use("/api", enhancePromptRouter);`.

2. Front‑end: UI changes in Create page
   - **File**: `pages/CreatePage.tsx`
     - Inside the prompt textarea component, add a trailing icon button:
       ```tsx
       <Button
         size="icon"
         variant="ghost"
         title="Enhance Prompt (Ctrl+Space)"
         onClick={enhancePrompt}
       >
         ✨
       </Button>
       ```
     - Keyboard shortcut:
       ```ts
       useHotkeys("ctrl+space", enhancePrompt);
       ```
   - **Enhance handler**:
     ```ts
     async function enhancePrompt() {
       if (prompt.length < 3) return;
       setEnhancing(true);
       const { prompt: newPrompt, negativePrompt } = await api.post("/api/enhance-prompt", {
         text: prompt,
         model: selectedModel, // "gpt-image-1" | "imagen-3" | "flux-pro-1.1"
       }).then(r => r.data);
       setPrompt(newPrompt);
       if (negativePrompt) setNegativePrompt(negativePrompt);
       setEnhancing(false);
     }
     ```

3. Prompt template utilities
   - **File**: `utils/modelPromptTemplates.ts`
     ```ts
     export function systemTemplate(model: string) {
       switch (model) {
         case "gpt-image-1":
           return "Use photographic terms, explicit lens types, f‑stop, film grain.";
         case "imagen-3":
           return "Add bold color descriptions, meticulous composition, trending on ArtStation.";
         case "flux-pro-1.1":
           return "Focus on realistic automotive rendering, studio HDR lighting.";
         default:
           return "";
       }
     }
     ```

4. Toast feedback
   - Show a toast “Prompt enhanced!” on success.
   - On error, toast “Couldn’t enhance prompt (API error)”.

5. Caching & rate‑limit
   - Add simple in‑memory LRU (size 200) caching keyed by `{model}:{text}` in the route.

Testing
- Type “red sports car” with each model selected → click ✨ → textarea swaps to long, detailed sentence with camera angle and 8K mention; negativePrompt field populates if returned.
- Quick successive clicks (≤3/sec) on ✨ should return cached result.
- Keyboard `Ctrl+Space` triggers enhance.
- Disable ✨ while `setEnhancing` is true (spinner icon).

Reminders & Constraints
- Do not modify existing Tailwind styles or component APIs.
- Keep LLM response under 100 tokens to control cost.
- Ensure route is behind auth middleware if required.
