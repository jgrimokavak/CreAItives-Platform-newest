Import Object Store Library
const { Client } = require('@replit/object-storage');
const client = new Client();

Download an object as text (i.e. JSON)
const { ok, value: textValue, error } = await client.downloadAsText('file.json');
if (!ok) {
    // ... handle error ...
}

Download an object as its raw byte representation (i.e. images)
const { ok, value: bytesValue, error } = await client.downloadAsBytes('file.png');
if (!ok) {
    // ... handle error ...
}

Download an object by streaming the object's contents (i.e. streaming data over an API)
const { ok, value: stream, error } = await client.downloadAsStream('file.json');
if (!ok) {
    // ... handle error ...
}

Download an object to the filesystem
const { ok, error } = await client.downloadToFilename('file.json', destFilename);
if (!ok) {
    // ... handle error ...
}

List the objects in the bucket
const { ok, value, error } = await client.list();
if (!ok) {
    // ... handle error ...
}

Upload an object from text (i.e. JSON)
const { ok, error } = await client.uploadFromText('file.json', data);
if (!ok) {
    // ... handle error ...
}

Upload an object from its byte representation (i.e. images)
const { ok, error } = await client.uploadFromBytes('file.png', data);
if (!ok) {
    // ... handle error ...
}

Upload an object from the filesystem
const { ok, error } = await client.uploadFromFilename('file.json', srcFilename);
if (!ok) {
    // ... handle error ...
}

Upload an object from a stream (i.e. streaming data over an API)
const { ok, error } = await client.uploadFromStream('file.json', stream);
if (!ok) {
    // ... handle error ...
}

Delete an object from the bucket
const { ok, error } = await client.delete('file.json');
if (!ok) {
    // ... handle error ...
}